{
  "openapi": "3.0.3",
  "info": {
    "title": "DAMS Collection API",
    "description": "An API for interactings with the DAMS",
    "contact": {
      "email": "developers@inuits.eu"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "DAMS Collection API Source",
    "url": "https://gitlab.com/inuits/dams/dams-collection-api"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "config",
      "description": "Config for DAMS"
    },
    {
      "name": "entity",
      "description": "Entities in DAMS"
    },
    {
      "name": "mediafile",
      "description": "Mediafiles in DAMS"
    },
    {
      "name": "saved_search",
      "description": "Saved searches in DAMS"
    }
  ],
  "paths": {
    "/config": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Get config",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/config"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/entities": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get entities",
        "operationId": "getEntities",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of ids of entities to return",
            "required": false,
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of entities",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "only_own",
            "in": "query",
            "description": "Return only own entities",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of entities",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "skip_relations",
            "in": "query",
            "description": "Don't add relations to metadata",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter on entity type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Only return specified fiels in output. Only works for output in CSV-format",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Field to order results on",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "Sort direction, ascending when 1, descending when 0",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/entity"
                  }
                }
              },
              "application/ld+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "application/n-triples": {
                "schema": {
                  "type": "string"
                }
              },
              "application/rdf+xml": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              },
              "text/turtle": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Add an entity",
        "operationId": "addEntity",
        "parameters": [
          {
            "name": "create_mediafile",
            "in": "query",
            "description": "Create empty mediafile together with entity",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "create_mediafiles",
            "in": "query",
            "description": "Alias for create_mediafile",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "mediafile_filename",
            "in": "query",
            "description": "Filename for the to-be created mediafile",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mediafile_filename[]",
            "in": "query",
            "description": "Alias for mediafile_filename",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Entity object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/entity"
              }
            },
            "application/ld+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/n-triples": {
              "schema": {
                "type": "string"
              }
            },
            "application/rdf+xml": {
              "schema": {
                "type": "string"
              }
            },
            "text/turtle": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              },
              "text/uri-list": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Entity doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Request body is invalid"
          },
          "409": {
            "description": "Entity identifier is not unique"
          }
        }
      }
    },
    "/entities/filter": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Filter entities",
        "operationId": "filterEntities",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of entities",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of entities",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "description": "Filter that needs to be executed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filter"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/entity"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/entities/filter/{savedSearchId}": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Filter entities by saved search",
        "operationId": "filterEntitiesBySavedSearchId",
        "parameters": [
          {
            "name": "savedSearchId",
            "in": "path",
            "description": "saved_search identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/entity"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/entities/{entityId}": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get entity with id",
        "operationId": "getEntityId",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Only return specified fiels in output. Only works for output in CSV-format",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              },
              "application/ld+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "application/n-triples": {
                "schema": {
                  "type": "string"
                }
              },
              "application/rdf+xml": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              },
              "text/turtle": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      },
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Update entity with id",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content to update entity with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/entity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            }
          },
          "400": {
            "description": "Entity doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          },
          "409": {
            "description": "Entity identifier is not unique"
          }
        }
      },
      "patch": {
        "tags": [
          "entity"
        ],
        "summary": "Patch entity with id",
        "operationId": "patchEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content to patch into entity",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/entity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            }
          },
          "400": {
            "description": "Entity doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          },
          "409": {
            "description": "Entity identifier is not unique"
          }
        }
      },
      "delete": {
        "tags": [
          "entity"
        ],
        "summary": "Delete entity with id",
        "operationId": "deleteEntityId",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete_mediafiles",
            "in": "query",
            "description": "Delete mediafiles linked to entity",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      }
    },
    "/entities/{entityId}/metadata": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get metadata of entity with id",
        "operationId": "getEntityIdMetadata",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Only return specified fiels in output. Only works for output in CSV-format",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metadata"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      },
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Add metadata to entity with id",
        "operationId": "addEntityIdMetadata",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Metadata objects to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metadata"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          }
        }
      },
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Update metadata of entity with id",
        "operationId": "updateEntityIdMetadata",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Metadata objects to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metadata"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          }
        }
      },
      "patch": {
        "tags": [
          "entity"
        ],
        "summary": "Patch metadata of entity with id",
        "operationId": "patchEntityIdMetadata",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Metadata objects to be patched in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metadata"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          }
        }
      }
    },
    "/entities/{entityId}/metadata/{key}": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get metadata by key of entity with id",
        "operationId": "getEntityIdMetadataField",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Metadata key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metadata"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      },
      "delete": {
        "tags": [
          "entity"
        ],
        "summary": "Delete metadata by key of entity with id",
        "operationId": "deleteEntityIdMetadata",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Metadata key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      }
    },
    "/entities/{entityId}/mediafiles": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get mediafiles of entity with id",
        "operationId": "getEntityIdMediafiles",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "non_public",
            "in": "query",
            "description": "Also return non-public mediafiles",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mediafile"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      },
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Add mediafile to entity with id",
        "operationId": "addEntityIdMediafile",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mediafile"
                  }
                }
              },
              "text/uri-list": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Mediafile doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          }
        }
      }
    },
    "/entities/{entityId}/mediafiles/create": {
      "post": {
        "deprecated": true,
        "tags": [
          "entity"
        ],
        "summary": "Create mediafile for asset with id",
        "operationId": "createEntityIdMediafile",
        "requestBody": {
          "description": "Properties for mediafile",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mediafile"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "description": "storage-api link for file upload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Request body is invalid"
          }
        }
      }
    },
    "/entities/{entityId}/relations": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get relations of entity with id",
        "operationId": "getEntityIdRelations",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      },
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Add relations to entity with id",
        "operationId": "addEntityIdRelations",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Relation objects to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/relation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Update relations of entity with id",
        "operationId": "updateEntityIdRelations",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Relation objects to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/relation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "patch": {
        "tags": [
          "entity"
        ],
        "summary": "Patch relations of entity with id",
        "operationId": "patchEntityIdRelations",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Relation objects to be patched",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/relation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/entities/{entityId}/relations/all": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Get all relations of entity with id",
        "operationId": "getEntityIdRelationsAll",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity not found"
          }
        }
      }
    },
    "/entities/{entityId}/set_primary_mediafile/{mediafileId}": {
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Set primary mediafile by id of entity with id",
        "operationId": "setPrimaryMediafileIdEntityId",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediafileId",
            "in": "path",
            "description": "Mediafile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity or mediafile not found"
          }
        }
      }
    },
    "/entities/{entityId}/set_primary_thumbnail/{mediafileId}": {
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Set primary thumbnail by id of entity with id",
        "operationId": "setPrimaryThumbnailIdEntityId",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediafileId",
            "in": "path",
            "description": "Mediafile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Entity or mediafile not found"
          }
        }
      }
    },
    "/mediafiles": {
      "get": {
        "tags": [
          "mediafile"
        ],
        "summary": "Get mediafiles",
        "operationId": "getMediafiles",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of ids of mediafiles to return",
            "required": false,
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of mediafiles",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of mediafiles",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mediafile"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "mediafile"
        ],
        "summary": "Add a mediafile",
        "operationId": "addMediafile",
        "requestBody": {
          "description": "Mediafile object to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mediafile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mediafile"
                }
              }
            }
          },
          "400": {
            "description": "Mediafile doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/mediafiles/filter": {
      "post": {
        "tags": [
          "mediafile"
        ],
        "summary": "Filter Mediafiles",
        "operationId": "filterMediafiles",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of mediafiles",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of mediafiles",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "description": "Filter that needs to be executed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filter"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mediafile"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/mediafiles/filter/{savedSearchId}": {
      "post": {
        "tags": [
          "mediafile"
        ],
        "summary": "Filter mediafiles by saved search",
        "operationId": "filterMediafilesBySavedSearchId",
        "parameters": [
          {
            "name": "savedSearchId",
            "in": "path",
            "description": "saved_search identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mediafile"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/mediafiles/{mediafileId}": {
      "get": {
        "tags": [
          "mediafile"
        ],
        "summary": "Get mediafile with id",
        "operationId": "getMediafileId",
        "parameters": [
          {
            "name": "mediafileId",
            "in": "path",
            "description": "Mediafile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mediafile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Mediafile not found"
          }
        }
      },
      "put": {
        "tags": [
          "mediafile"
        ],
        "summary": "Update mediafile with id",
        "operationId": "updateMediafile",
        "parameters": [
          {
            "name": "mediafileId",
            "in": "path",
            "description": "Mediafile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content to update mediafile with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mediafile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mediafile"
                }
              }
            }
          },
          "400": {
            "description": "Mediafile doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Mediafile not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "patch": {
        "tags": [
          "mediafile"
        ],
        "summary": "Patch mediafile with id",
        "operationId": "patchMediafile",
        "parameters": [
          {
            "name": "mediafileId",
            "in": "path",
            "description": "Mediafile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content to patch into mediafile",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mediafile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mediafile"
                }
              }
            }
          },
          "400": {
            "description": "Mediafile doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Mediafile not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mediafile"
        ],
        "summary": "Delete mediafile with id",
        "operationId": "deleteMediafileId",
        "parameters": [
          {
            "name": "mediafileId",
            "in": "path",
            "description": "Mediafile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Mediafile not found"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "Get jobs",
        "operationId": "getJobs",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of ids of jobs to return",
            "required": false,
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of jobs",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of jobs",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by job type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/job"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "Get job with id",
        "operationId": "getJobId",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Job not found"
          }
        }
      }
    },
    "/saved_searches": {
      "get": {
        "tags": [
          "saved_search"
        ],
        "summary": "Get saved searches",
        "operationId": "getSavedSearches",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of ids of saved searches to return",
            "required": false,
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of saved searches",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "only_own",
            "in": "query",
            "description": "Return only own saved searches",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of entities",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/saved_search"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "saved_search"
        ],
        "summary": "Add a saved search",
        "operationId": "addSavedSearch",
        "requestBody": {
          "description": "Saved search object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/saved_search"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            }
          },
          "400": {
            "description": "Entity doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Request body is invalid"
          },
          "409": {
            "description": "Entity identifier is not unique"
          }
        }
      }
    },
    "/saved_searches/{saved_searchId}": {
      "get": {
        "tags": [
          "saved_search"
        ],
        "summary": "Get saved_search with id",
        "operationId": "getsaved_searchId",
        "parameters": [
          {
            "name": "saved_searchId",
            "in": "path",
            "description": "saved_search identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saved_search"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "saved_search not found"
          }
        }
      },
      "put": {
        "tags": [
          "saved_search"
        ],
        "summary": "Update saved_search with id",
        "operationId": "updatesaved_search",
        "parameters": [
          {
            "name": "saved_searchId",
            "in": "path",
            "description": "saved_search id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content to update saved_search with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/saved_search"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saved_search"
                }
              }
            }
          },
          "400": {
            "description": "saved_search doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "saved_search not found"
          },
          "405": {
            "description": "Request body is invalid"
          },
          "409": {
            "description": "saved_search identifier is not unique"
          }
        }
      },
      "patch": {
        "tags": [
          "saved_search"
        ],
        "summary": "Patch saved_search with id",
        "operationId": "patchsaved_search",
        "parameters": [
          {
            "name": "saved_searchId",
            "in": "path",
            "description": "saved_search id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content to patch into saved_search",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/saved_search"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saved_search"
                }
              }
            }
          },
          "400": {
            "description": "saved_search doesn't have a valid format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "saved_search not found"
          },
          "405": {
            "description": "Request body is invalid"
          },
          "409": {
            "description": "saved_search identifier is not unique"
          }
        }
      },
      "delete": {
        "tags": [
          "saved_search"
        ],
        "summary": "Delete saved_search with id",
        "operationId": "deletesaved_searchId",
        "parameters": [
          {
            "name": "saved_searchId",
            "in": "path",
            "description": "saved_search id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "saved_search not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "config": {
        "type": "object",
        "description": "Config options for DAMS"
      },
      "definition": {
        "type": "object",
        "description": "Saved search definition object",
        "required": [
          "type"
        ],
        "properties": {
          "item_types": {
            "type": "array",
            "description": "item types to advanced search on",
            "items": {
              "type": "string"
            }
          },
          "key": {
            "type": "string",
            "description": "advanced search key to search on"
          },
          "type": {
            "type": "string",
            "description": "type of advanced search"
          },
          "value": {
            "type": "array",
            "description": "advanced search value to search on, can be a string or an array depending on the type",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "entity": {
        "type": "object",
        "description": "Entity object",
        "required": [
          "type"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "entity data"
          },
          "id": {
            "type": "string",
            "description": "entity id",
            "format": "uuid"
          },
          "identifiers": {
            "type": "array",
            "description": "entity identifiers",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "array",
            "description": "entity metadata",
            "items": {
              "$ref": "#/components/schemas/metadata"
            }
          },
          "object_id": {
            "type": "string",
            "description": "entity object_id"
          },
          "type": {
            "type": "string",
            "description": "entity value"
          }
        }
      },
      "filter": {
        "type": "object",
        "description": "Filter object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "filter type"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Value to search on"
          },
          "key": {
            "type": "string",
            "description": "Key of metadata to apply query on"
          },
          "relation_types": {
            "type": "string",
            "description": "The relation to be within treshhold of MinMaxFilter"
          },
          "metadata_field": {
            "type": "string",
            "description": "The metadata field to be within treshhold of MinMaxFilter"
          },
          "parent": {
            "type": "string",
            "description": "The parent entity in which the query will be executed. Only work in combination with Mongo backend."
          },
          "item_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Item types to return, or relation types to search in, in case of a MultiSelectFilter"
          }
        }
      },
      "job": {
        "type": "object",
        "description": "Job object",
        "required": [
          "job_type",
          "job_info",
          "status",
          "start_time"
        ],
        "properties": {
          "job_type": {
            "type": "string"
          },
          "job_info": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "asset": {
            "type": "string"
          },
          "mediafile_id": {
            "type": "string"
          },
          "parent_job_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "sub_jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/job"
            }
          }
        }
      },
      "mediafile": {
        "type": "object",
        "description": "Mediafile object",
        "required": [
          "filename"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "mediafile filename"
          },
          "id": {
            "type": "string",
            "description": "mediafile id",
            "format": "uuid"
          },
          "identifiers": {
            "type": "array",
            "description": "mediafile identifiers",
            "items": {
              "type": "string"
            }
          },
          "md5sum": {
            "type": "string",
            "description": "mediafile md5sum"
          },
          "metadata": {
            "type": "array",
            "description": "mediafile metadata",
            "items": {
              "$ref": "#/components/schemas/metadata"
            }
          },
          "original_filename": {
            "type": "string",
            "description": "mediafile original filename"
          }
        }
      },
      "metadata": {
        "type": "object",
        "description": "Metadata object",
        "required": [
          "key",
          "type"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "metadata key"
          },
          "label": {
            "type": "string",
            "description": "metadata label"
          },
          "language": {
            "type": "string",
            "description": "metadata language"
          },
          "value": {
            "type": "string",
            "description": "metadata value"
          }
        }
      },
      "relation": {
        "type": "object",
        "description": "Relation object",
        "required": [
          "key",
          "type"
        ],
        "properties": {
          "key": {
            "type": "string",
            "format": "uuid",
            "description": "id to which this relation goes"
          },
          "label": {
            "type": "string",
            "description": "extra relation info"
          },
          "type": {
            "type": "string",
            "description": "relation type"
          }
        }
      },
      "saved_search": {
        "type": "object",
        "description": "Saved search object",
        "required": [
          "type"
        ],
        "properties": {
          "definition": {
            "type": "array",
            "description": "saved search definition",
            "items": {
              "$ref": "#/components/schemas/definition"
            }
          },
          "id": {
            "type": "string",
            "description": "saved search id",
            "format": "uuid"
          },
          "identifiers": {
            "type": "array",
            "description": "saved search identifiers",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "array",
            "description": "saved search metadata",
            "items": {
              "$ref": "#/components/schemas/metadata"
            }
          },
          "private": {
            "type": "boolean",
            "description": "private saved search"
          },
          "type": {
            "type": "string",
            "description": "saved search type"
          }
        }
      }
    }
  }
}